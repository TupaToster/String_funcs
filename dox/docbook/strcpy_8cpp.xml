<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_strcpy_8cpp" xml:lang="en-US">
<title>strcpy.cpp File Reference</title>
<indexterm><primary>strcpy.cpp</primary></indexterm>
<programlisting>#include &quot;protos.h&quot;
</programlisting><simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_strcpy_8cpp_1a72531846ab7d930fd1a509b0ad5851ad">my_strcpy</link> (char *const from, char *const to)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_strcpy_8cpp_1a925a08a32744e62910b892013764ed83">my_strncpy</link> (char *const from, char *const to, unsigned int n)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_strcpy_8cpp_1a4dc6f77e5a6731a3c4cca80a0ea6d9b0">my_smart_strcpy</link> (const char *from, char **to)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Function Documentation</title>
<anchor xml:id="_strcpy_8cpp_1a4dc6f77e5a6731a3c4cca80a0ea6d9b0"/>    <section>
    <title>my_smart_strcpy()</title>
<indexterm><primary>my_smart_strcpy</primary><secondary>strcpy.cpp</secondary></indexterm>
<indexterm><primary>strcpy.cpp</primary><secondary>my_smart_strcpy</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_smart_strcpy (const char * from, char ** to)</computeroutput></para>
<para><literallayout><computeroutput>\brief Super smart strcpy
\param from - pointer to a string to copy from
\param to - pointer to a string to copy to
\return OK - if successfully copied
\return MEM_ERR - if some pointers are NULL
\return OVERFL - if pc runs out of storage space
</computeroutput></literallayout> Smart ctrcpy rellocates &quot;to&quot; string for it to fit exactly as many chars as &quot;from&quot; </para>
    </section><anchor xml:id="_strcpy_8cpp_1a72531846ab7d930fd1a509b0ad5851ad"/>    <section>
    <title>my_strcpy()</title>
<indexterm><primary>my_strcpy</primary><secondary>strcpy.cpp</secondary></indexterm>
<indexterm><primary>strcpy.cpp</primary><secondary>my_strcpy</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_strcpy (char *const from, char *const to)</computeroutput></para>
<para><literallayout><computeroutput>\brief Simply copies one string into other
\param from - string to copy from
\param to - string to copy to
\return OK - if copied
\return MEM_ERR - if one or more parameters are NULL
</computeroutput></literallayout> Simple cstcpy function that does not care about any possible damage it may make It is trying hard not to cause any seg fault </para>
    </section><anchor xml:id="_strcpy_8cpp_1a925a08a32744e62910b892013764ed83"/>    <section>
    <title>my_strncpy()</title>
<indexterm><primary>my_strncpy</primary><secondary>strcpy.cpp</secondary></indexterm>
<indexterm><primary>strcpy.cpp</primary><secondary>my_strncpy</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_strncpy (char *const from, char *const to, unsigned int n)</computeroutput></para>
<para><literallayout><computeroutput>\brief A bit more complex copy func
\param from - string to copy from
\param to - string to copy to
\param n - number of chars to copy
\return OK if all ok
\return MEM_ERR if one or more ptrs 
\return OVERFL if pc ran out of free mem
</computeroutput></literallayout> Function to copy not more than n chars also can kinda cause seg fault </para>
</section>
</section>
</section>
