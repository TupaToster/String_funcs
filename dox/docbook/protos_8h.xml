<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_protos_8h" xml:lang="en-US">
<title>protos.h File Reference</title>
<indexterm><primary>protos.h</primary></indexterm>
<programlisting>#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;assert.h&gt;
</programlisting><simplesect>
    <title>Enumerations    </title>
        <itemizedlist>
            <listitem><para>enum <link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> { <link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00a2bc49ec37d6a5715dd23e85f1ff5bb59">OK</link> = 0
, <link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00a67b5846d76d883bcefacc95351f7803e">MEM_ERR</link> = -1
, <link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00a051d0e90144d67549b6bd28b8bc76a11">OVERFL</link> = 1
 }</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1a3f6b7b5f831029c14df24abeac1d57e8">my_fputs</link> (const char *out_str, FILE *stream)</para>
</listitem>
            <listitem><para>unsigned int <link linkend="_protos_8h_1aba855dca0dac39e28eb5264dc3ec2049">my_strlen</link> (const char *str)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1a72531846ab7d930fd1a509b0ad5851ad">my_strcpy</link> (char *const from, char *const to)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1a745e53545447dc16984bbb926b3356db">my_strncpy</link> (char *const from, char *const to, const unsigned int n)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1a4dc6f77e5a6731a3c4cca80a0ea6d9b0">my_smart_strcpy</link> (const char *from, char **to)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1af3005e3df6fbf19089cfbad2aea69884">my_strcat</link> (const char *from, char **to)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1a706a9327e6ff3bfc775086bf1509fe8c">my_strncat</link> (const char *from, char **to, const unsigned int n)</para>
</listitem>
            <listitem><para><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> <link linkend="_protos_8h_1acfb6838062d4b9eccc8c7db12539fa5f">my_fgets</link> (char **to, FILE *stream)</para>
</listitem>
            <listitem><para>char * <link linkend="_protos_8h_1af36482ca227a1916a8a2f93ae01fe510">my_strdup</link> (const char *src)</para>
</listitem>
            <listitem><para>char * <link linkend="_protos_8h_1a2cc4cf5219af874ad19160df6458ea48">my_strchr</link> (char *const src, const char ch)</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Enumeration Type Documentation</title>
<anchor xml:id="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00"/>    <section>
    <title>action_status</title>
<indexterm><primary>action_status</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>action_status</secondary></indexterm>
<para><computeroutput>enum <link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link></computeroutput></para>
<para>Displays status of action that involves changing memory or reading it </para>
<informaltable frame="all">
<title>Enumerator</title>
    <tgroup cols="2" align="left" colsep="1" rowsep="1">
      <colspec colname='c1'/>
      <colspec colname='c2'/>
<tbody>
<row><entry><indexterm><primary>OK</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>OK</secondary></indexterm>
<anchor xml:id="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00a2bc49ec37d6a5715dd23e85f1ff5bb59"/>OK</entry><entry>
<para>Everything ok. </para>
</entry></row><row><entry><indexterm><primary>MEM_ERR</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>MEM_ERR</secondary></indexterm>
<anchor xml:id="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00a67b5846d76d883bcefacc95351f7803e"/>MEM_ERR</entry><entry>
<para>Memory error, i.e. something wrong with pointers. </para>
</entry></row><row><entry><indexterm><primary>OVERFL</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>OVERFL</secondary></indexterm>
<anchor xml:id="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00a051d0e90144d67549b6bd28b8bc76a11"/>OVERFL</entry><entry>
<para>Overflow error, i.e. not enough memory. </para>
</entry></row>    </tbody>
    </tgroup>
</informaltable>
<para>
Definition at line 11 of file protos.h.</para>
</section>
</section>
<section>
<title>Function Documentation</title>
<anchor xml:id="_protos_8h_1acfb6838062d4b9eccc8c7db12539fa5f"/>    <section>
    <title>my_fgets()</title>
<indexterm><primary>my_fgets</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_fgets</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_fgets (char ** to, FILE * stream)</computeroutput></para>
<para><literallayout><computeroutput>\brief Gets string from input file
\param to - string to read to
\param stream - filestream to read rom
\return OK - all fine
\return MEM_ERR - one or more pts are NULL(ded)
\return OVERFL - pc ran out of storage space (also erases everything from &quot;to&quot;)
</computeroutput></literallayout> Reads string from file dynamically changing string&apos;s length may have a bit unefficient memory management </para>
<para>
Definition at line 14 of file fgets.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a3f6b7b5f831029c14df24abeac1d57e8"/>    <section>
    <title>my_fputs()</title>
<indexterm><primary>my_fputs</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_fputs</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_fputs (const char * out_str, FILE * stream)</computeroutput></para>
<para><literallayout><computeroutput>\brief Simple file output function
\param out_str - const string to output
\param stream  - output stream
\return OK - if everything went cool
\return MEM_ERR - if one of parametres is NULL
\return OVERFL - if it&apos;s impossible to put char into file
</computeroutput></literallayout> Prints a string into a file and doesn&apos;t mind sizes of both, also can&apos;t abort program </para>
<para>
Definition at line 14 of file fputs.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a4dc6f77e5a6731a3c4cca80a0ea6d9b0"/>    <section>
    <title>my_smart_strcpy()</title>
<indexterm><primary>my_smart_strcpy</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_smart_strcpy</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_smart_strcpy (const char * from, char ** to)</computeroutput></para>
<para><literallayout><computeroutput>\brief Super smart strcpy
\param from - pointer to a string to copy from
\param to - pointer to a string to copy to
\return OK - if successfully copied
\return MEM_ERR - if some pointers are NULL
\return OVERFL - if pc runs out of storage space
</computeroutput></literallayout> Smart ctrcpy rellocates &quot;to&quot; string for it to fit exactly as many chars as &quot;from&quot; </para>
<para>
Definition at line 67 of file strcpy.cpp.</para>
    </section><anchor xml:id="_protos_8h_1af3005e3df6fbf19089cfbad2aea69884"/>    <section>
    <title>my_strcat()</title>
<indexterm><primary>my_strcat</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strcat</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_strcat (const char * from, char ** to)</computeroutput></para>
<para><literallayout><computeroutput>\brief Concatenates strings
\param from - string to concat
\param to - ptr to string to concat to
\return OK if allright
\return MEM_ERR if one of ptrs is NULL
\return OVERFL if pc is out of mem
</computeroutput></literallayout> Concatenates two strings into the &quot;to&quot; one </para>
<para>
Definition at line 14 of file strcat.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a2cc4cf5219af874ad19160df6458ea48"/>    <section>
    <title>my_strchr()</title>
<indexterm><primary>my_strchr</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strchr</secondary></indexterm>
<para><computeroutput>char* my_strchr (char *const src, const char ch)</computeroutput></para>
<para><literallayout><computeroutput>\brief Finds a char
\param src - string to search in
\param ch - char to search for
\return ptr to a char in string
\return NULL if there is no char in string or no string
</computeroutput></literallayout> Finds a set char in a set string and returns a ptr to char in the string </para>
<para>
Definition at line 13 of file strchr.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a72531846ab7d930fd1a509b0ad5851ad"/>    <section>
    <title>my_strcpy()</title>
<indexterm><primary>my_strcpy</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strcpy</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_strcpy (char *const from, char *const to)</computeroutput></para>
<para><literallayout><computeroutput>\brief Simply copies one string into other
\param from - string to copy from
\param to - string to copy to
\return OK - if copied
\return MEM_ERR - if one or more parameters are NULL
</computeroutput></literallayout> Simple cstcpy function that does not care about any possible damage it may make It is trying hard not to cause any seg fault </para>
<para>
Definition at line 14 of file strcpy.cpp.</para>
    </section><anchor xml:id="_protos_8h_1af36482ca227a1916a8a2f93ae01fe510"/>    <section>
    <title>my_strdup()</title>
<indexterm><primary>my_strdup</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strdup</secondary></indexterm>
<para><computeroutput>char* my_strdup (const char * src)</computeroutput></para>
<para><literallayout><computeroutput>\brief Copies a string to heap
\param src - string to copy
\return ptr to an allocated memory
</computeroutput></literallayout> Returns a pointer to a newly allocated memory that contains a copy of a string passed into it </para>
<para>
Definition at line 11 of file strdup.cpp.</para>
    </section><anchor xml:id="_protos_8h_1aba855dca0dac39e28eb5264dc3ec2049"/>    <section>
    <title>my_strlen()</title>
<indexterm><primary>my_strlen</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strlen</secondary></indexterm>
<para><computeroutput>unsigned int my_strlen (const char * str)</computeroutput></para>
<para><literallayout><computeroutput>\brief Returns string length
\param str - string to calculate len of
\return -1 - if str is NULL
\return anything &gt;=0 - string&apos;s len
</computeroutput></literallayout> Calculates string length. Nothing more to say </para>
<para>
Definition at line 10 of file strlen.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a706a9327e6ff3bfc775086bf1509fe8c"/>    <section>
    <title>my_strncat()</title>
<indexterm><primary>my_strncat</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strncat</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_strncat (const char * from, char ** to, unsigned int n)</computeroutput></para>
<para><literallayout><computeroutput>\brief Concatenates two strings with limit
\param from - string to concatenate from
\param to - string to concatenate to
\param n - max amount if symbols to concat from &quot;from&quot;
\return OK - all fine
\return MEM_ERR - one or more pts are NULL
\return OVERFL - not enough memory
</computeroutput></literallayout> Concats two strings, but adds not more then n symbols from &quot;from&quot; </para>
<para>
Definition at line 45 of file strcat.cpp.</para>
    </section><anchor xml:id="_protos_8h_1a745e53545447dc16984bbb926b3356db"/>    <section>
    <title>my_strncpy()</title>
<indexterm><primary>my_strncpy</primary><secondary>protos.h</secondary></indexterm>
<indexterm><primary>protos.h</primary><secondary>my_strncpy</secondary></indexterm>
<para><computeroutput><link linkend="_protos_8h_1af617fb44a7c1958910a3e7a07b8b1d00">action_status</link> my_strncpy (char *const from, char *const to, unsigned int n)</computeroutput></para>
<para><literallayout><computeroutput>\brief A bit more complex copy func
\param from - string to copy from
\param to - string to copy to
\param n - number of chars to copy
\return OK if all ok
\return MEM_ERR if one or more ptrs 
\return OVERFL if pc ran out of free mem
</computeroutput></literallayout> Function to copy not more than n chars also can kinda cause seg fault </para>
<para>
Definition at line 41 of file strcpy.cpp.</para>
</section>
</section>
</section>
